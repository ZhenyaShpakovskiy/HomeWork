package HomeWork1;

public class Task2 {
    public static void main(String[] args) {
        int a = 2;
        int b = 8;

        int num1 = (5 + 2 / 8); // первым выполняется деление 2 / 8 = 0 => 5 + 0 = 5;
        int num2 = ((5 + 2) / 8); // первым выполняется сложение, т.к. взято в скобки 5 + 2 = 7 => 7 / 8 = 0;
        int num3 = ((5 + a++) / 8); // постинкремент a++ сначала вернет a, а потом увеличит a на 1 =>
        // 5 + 2 = 7 => 7 / 8 = 0;
        a = 2;

        int num4 = ((5 + a++) / --b); // постинкремент a++ сначала вернет a, а потом увеличит a на 1 =>
        // преинкремент сначала уменьшит b на 1, а потом веренет b => 5 + 2 = 7 => 7 / 7 = 1;
        a = 2;
        b = 8;

        int num5 = ((5 * 2 >> a++) / --b); // постинкремент a++ сначала вернет a, а потом увеличит a на 1 =>
        // преинкремент сначала уменьшит b на 1, а потом веренет b => 5 * 2 = 10 => 10 >> 2 = 2 => 2 / 7 = 0;
        a = 2;
        b = 8;

        int num6 = ((5 + 7 > 20 ? 68 : 22 * 2 >> a++) / --b);
        // постинкремент a++ сначала вернет a, а потом увеличит a на 1 =>
        // преинкремент сначала уменьшит b на 1, а потом веренет b =>
        // 5 + 2 = 7 => 7 > 20 = false => 22 * 2 = 44 => 44 >> 2 = 11 => 11 / 7 = 1;
        a = 2;
        b = 8;

        // int num7 = (5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> a++) / --b;
        // Так как в Java мы явно указываем тип данных для переменной, мы не можем в тернарном операторе использовать
        // разные типы данных при выходе с веток true или false.
        // Если переписать это же выражение в вывод в консоль, то ошибок не будет, так как мы ничего не присваиваем.

        boolean num8 = 6 - 2 > 3 || 12 * 12 <= 119; // Сначала выполняются математические действия -
        // 6 - 2 = 4;
        // 12 * 12 = 144;
        // Далее выполняются операторы сравнения -
        // 4 > 3 = true
        // 144 <= 119 = false
        // Далее выполняется логический оператор И
        // true && false = false

        boolean num9 = true && false; // Оператор && запинается на лжи
        // Оператор || запинается на истинне
        // true && false = false
    }
}
